library(ggplot2)
# 1. BASE PACKAGE AND GGPLOT2
#### BASE PACKAGE
# Use lm() to calculate a linear model and save it as carModel
carModel <- lm(mpg ~ wt, data = mtcars)
# Basic plot
mtcars$cyl <- as.factor(mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
# Call abline() with carModel as first argument and set lty to 2
abline(carModel, lty = 2)
# Plot each subset efficiently with lapply
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
lapply(mtcars$cyl, function(x) {
abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
#### AESTHETICS
# am and cyl are factors, wt is numeric
class(mtcars$am)
class(mtcars$cyl)
class(mtcars$wt)
install.packages("quantreg")
#### QUANTILES REGRESSION
# By default, the 1st, 2nd (i.e. median), and 3rd quartiles are modeled as a response to the predictor variable, in this case education
# Use stat_quantile instead of stat_smooth:
ggplot(Vocab, aes(x = educ, y = vocab, col = year, group = factor(year))) +
stat_quantile(alpha = 0.6, size = 2) +
scale_color_gradientn(colors = brewer.pal(9,"YlOrRd"))
install.packages("Matrix")
install.packages("lattice")
install.packages("Hmisc")
install.packages("survival")
install.packages("cluster")
install.packages("nnet")
?smean.sd
qnorm(c(0.25, 0.75))
diff(qnorm(c(0.25, 0.75)))
msleep
#### DROP LEVEL
# When you have a categorical variable with many levels which are not all present in each sub-group of another variable, it may be desirable to drop the unused levels.
# Basic scatter plot
p <- ggplot(msleep, aes(x = sleep_total, y = name, col = genus)) +
geom_point()
# Execute to display plot
p
# Facet rows accoding to vore
p +
facet_grid(vore ~ .)
# Specify scale and space arguments to free up rows
p +
facet_grid(vore ~ ., scale = "free_y", space = "free_y")
install.packages("ggthemes")
install.packages("gridExtra")
install.packages("GGally")
c_obs <- data.frame(ggplot_build(c)$data)
install.packages("ggplot2movies")
install.packages("PerformanceAnalytics")
install.packages("ggtern")
install.packages("boot")
install.packages("geomnet")
install.packages("ggfortify")
install.packages("maps")
install.packages("ggmap")
install.packages("rgdal")
#### CARTOGRAPHIC MAP
# Load the ggmap package
library(ggmap)
?get_map
# Experiment with get_map() and use ggmap() to plot it!
hanoi_map <- get_map("Hanoi, Vietnam", maptype = "toner", zoom = 13)
ggmap(hanoi_map)
# Experiment with get_map() and use ggmap() to plot it!
hanoi_map <- get_map("Hanoi, Vietnam", maptype = "toner", zoom = 13)
devtools::install_github("dkahle/ggmap")
install.packages("devtools")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")

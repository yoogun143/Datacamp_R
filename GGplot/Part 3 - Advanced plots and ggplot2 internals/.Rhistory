# 2 - Use gtable_add_grob to modify original gtab
new_legend <- gtable_add_grob(gtab$grobs[[legend_index]], my_text, 3, 2)
# 3 - Update in gtab
gtab$grobs[[legend_index]] <- new_legend
View(gtab)
View(gtab)
gtab
gtab$grobs
gtab$grobs[[legend_index]]
# 4 - Draw gtab
grid.draw(gtab)
#### GGPLOT OBJECT
# Simple plot p
p <- ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) + geom_point()
# Examine class() and names()
class(p)
names(p)
# Print the scales sub-list
p$scales$scales
# Update p
p <- p +
scale_x_continuous("Length", limits = c(4, 8), expand = c(0, 0)) +
scale_y_continuous("Width", limits = c(2, 4.5), expand = c(0, 0))
# Print the scales sub-list
p$scales$scales
#### GGPLOT_BUILD AND GGPLOT_GTABLE
# Box plot of mtcars: p
p <- ggplot(mtcars, aes(x = factor(cyl), y = wt)) + geom_boxplot()
# Create pbuild
pbuild <- ggplot_build(p)
# a list of 3 elements
names(pbuild)
# Print out each element in pbuild
pbuild$data
pbuild$layout
pbuild$plot
pbuild$panel
# Create gtab from pbuild
gtab <- ggplot_gtable(pbuild)
# Draw gtab
grid.draw(gtab)
# Build pdata
pdata <- ggplot_build(p)$data
# confirm that the first element of the list is a data frame
class(pdata[[1]])
# Isolate this data frame
my_df <- pdata[[1]]
# The x labels
my_df$group <- c("4", "6", "8")
# Print out specific variables
my_df[c(1:6, 11)]
#### GRID EXTRA
# Add a theme (legend at the bottom)
g1 <- ggplot(mtcars, aes(wt, mpg, col = cyl)) +
geom_point(alpha = 0.5) +
theme(legend.position = "bottom")
# Add a theme (no legend)
g2 <- ggplot(mtcars, aes(disp, fill = cyl)) +
geom_histogram(position = "identity", alpha = 0.5, binwidth = 20) +
theme(legend.position = "none")
# Load gridExtra
library(gridExtra)
# Call grid.arrange()
grid.arrange(g1, g2, ncol = 2)
#### GRID EXTRA = MFROW
# Definitions of g1 and g2
g1 <- ggplot(mtcars, aes(wt, mpg, col = cyl)) +
geom_point() +
theme(legend.position = "bottom")
g2 <- ggplot(mtcars, aes(disp, fill = cyl)) +
geom_histogram(binwidth = 20) +
theme(legend.position = "none")
# Extract the legend from g1
my_legend <- ggplotGrob(g1)$grobs[[legend_index]]
# Create g1_noleg
g1_noleg <- g1 +
theme(legend.position = "none")
# Calculate the height: legend_height
legend_height <- sum(my_legend$heights)
# Arrange g1_noleg, g2 and my_legend
grid.arrange(g1_noleg, g2, my_legend,
layout_matrix = matrix(c(1, 3, 2, 3), ncol = 2),
heights = unit.c(unit(1, "npc") - legend_height, legend_height))
load('test_datasets.RData')
setwd("E:/Datacamp/R/GGplot/Part 3 - Advanced plots and ggplot2 internals")
setwd("E:/Datacamp/R/GGplot/Part 3 - Advanced plots and ggplot2 internals")
load('test_datasets.RData')
# Call bagplot() on test_data
test_data = ch5_test_data
bagplot(test_data)
library(aplpack)
bagplot(test_data)
# Call compute.bagplot on test_data, assign to bag
bag <- compute.bagplot(test_data)
# Display information
bag$hull.loop
bag$hull.bag
bag$pxy.outlier
# Highlight components
points(bag$hull.loop, col = "green", pch = 16)
points(bag$hull.bag, col = "orange", pch = 16)
points(bag$pxy.outlier, col = "purple", pch = 16)
#### MULTILAYER GGPLOT2 BAGPLOT
# Create data frames from matrices
hull.loop <- data.frame(x = bag$hull.loop[,1], y = bag$hull.loop[,2])
hull.bag <- data.frame(x = bag$hull.bag[,1], y = bag$hull.bag[,2])
pxy.outlier <- data.frame(x = bag$pxy.outlier[,1], y = bag$pxy.outlier[,2])
# Finish the ggplot command
ggplot(test_data, aes(x = x,  y = y)) +
geom_polygon(data = hull.loop, fill = "green") +
geom_polygon(data = hull.bag, fill = "orange") +
geom_point(data = pxy.outlier, col = "purple", pch = 16, cex = 1.5)
library(ggplot2)
# Finish the ggplot command
ggplot(test_data, aes(x = x,  y = y)) +
geom_polygon(data = hull.loop, fill = "green") +
geom_polygon(data = hull.bag, fill = "orange") +
geom_point(data = pxy.outlier, col = "purple", pch = 16, cex = 1.5)
bag <- compute.bagplot(x = data$x, y = data$y)
StatLoop <- ggproto("StatLoop", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales) {
bag <- compute.bagplot(x = data$x, y = data$y)
data.frame(x = bag$hull.loop[,1], y = bag$hull.loop[,2])
})
# ggproto for StatBag (hull.bag)
StatBag <- ggproto("StatBag", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales) {
bag <- compute.bagplot(x = data$x, y = data$y)
data.frame(x = bag$hull.bag[,1], y = bag$hull.bag[,2])
})
# ggproto for StatOut (pxy.outlier)
StatOut <- ggproto("StatOut", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales) {
bag <- compute.bagplot(x = data$x, y = data$y)
data.frame(x = bag$pxy.outlier[,1], y = bag$pxy.outlier[,2])
})
# Combine ggproto objects in layers to build stat_bag()
stat_bag <- function(mapping = NULL, data = NULL, geom = "polygon",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, loop = FALSE, ...) {
list(
# StatLoop layer
layer(
stat = StatLoop, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, alpha = 0.35, col = NA, ...)
),
# StatBag layer
layer(
stat = StatBag, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, alpha = 0.35, col = NA, ...)
),
# StatOut layer
layer(
stat = StatOut, data = data, mapping = mapping, geom = "point",
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, alpha = 0.7, col = NA, shape = 21, ...)
)
)
}
# stat_bag
ggplot(test_data, aes(x = x, y = y)) +
stat_bag(fill = 'black')
# stat_bag on test_data2
test_data2 <- ch5_test_data2
ggplot(test_data2, aes(x = x, y = y, fill = treatment)) +
stat_bag()
setwd("E:/Datacamp/R/GGplot/Part 3 - Advanced plots and ggplot2 internals")
#### STEP 1: READ IN DATA AND EXAMINE
setwd("E:/Datacamp/R/GGplot/Part 3 - Advanced plots and ggplot2 internals")
# Import weather data
weather <- read.fwf("NYNEWYOR.txt",
header = FALSE,
col.names = c("month", "day", "year", "temp"),
widths = c(14, 14, 13, 4))
# Check structure of weather
str(weather)
# Create past with two filter() calls
past <- weather %>%
filter(!(month == 2 & day == 29)) %>%
filter(year != max(year))
# Create past with two filter() calls
library(dplyr)
past <- weather %>%
filter(!(month == 2 & day == 29)) %>%
filter(year != max(year))
# Check structure of past
str(past)
#### STEP 2: SUMMARIZE HISTORY
# Create new version of past
past_summ <- past %>%
group_by(year) %>%
mutate(yearday = 1:length(day)) %>%
ungroup() %>%
filter(temp != -99) %>%
group_by(yearday) %>%
mutate(max = max(temp),
min = min(temp),
avg = mean(temp),
CI_lower = Hmisc::smean.cl.normal(temp)[2],
CI_upper = Hmisc::smean.cl.normal(temp)[3]) %>%
ungroup()
# Structure of past_summ
str(past_summ)
past %>%
group_by(year) %>%
mutate(yearday = 1:length(day))
View(past_summ)
View(past_summ)
past %>%
group_by(year) %>%
mutate(yearday = 1:length(day))
#### PLOT HISTORY
# Adapt historical plot
ggplot(past, aes(x = yearday, y = temp)) +
geom_point(col = "#EED8AE", alpha = 0.3, shape = 16) +
geom_linerange(aes(ymin = CI_lower, ymax = CI_upper), col = "#8B7E66")
#### PLOT HISTORY
# Adapt historical plot
ggplot(past_summ, aes(x = yearday, y = temp)) +
geom_point(col = "#EED8AE", alpha = 0.3, shape = 16) +
geom_linerange(aes(ymin = CI_lower, ymax = CI_upper), col = "#8B7E66")
#### PLOT PRESENT
# Create present
present <- weather %>%
filter(!(month == 2 & day == 29)) %>%
filter(year == max(year)) %>%
group_by(year) %>%
mutate(yearday = 1:length(day)) %>%
ungroup() %>%
filter(temp != -99)
# Add geom_line to ggplot command
ggplot(past_summ, aes(x = yearday, y = temp)) +
geom_point(col = "#EED8AE", alpha = 0.3, shape = 16) +
geom_linerange(aes(ymin = CI_lower, ymax = CI_upper), col = "#8B7E66") +
geom_line(data = present, aes(x = yearday, y = temp))
View(past_summ)
#### STEP 5: FIND NEW RECORD HIGHS
# Create past_highs
past_highs <- past_summ %>%
group_by(yearday) %>%
summarise(past_high = max(temp))
# Create record_high
record_high <- present %>%
left_join(past_highs) %>%
filter(temp > past_high)
# Add record_high information to plot
ggplot(past_summ, aes(x = yearday, y = temp)) +
geom_point(col = "#EED8AE", alpha = 0.3, shape = 16) +
geom_linerange(aes(ymin = CI_lower, ymax = CI_upper), col = "#8B7E66") +
geom_line(data = present) +
geom_point(data = record_high, col = "#CD2626")
#### STEP 6: EFFICIENTLY CALCULATE RECORD HIGHS AND LOWS
# Create past_extremes
past_extremes <- past_summ %>%
group_by(yearday) %>%
summarise(past_low = min(temp),
past_high = max(temp))
# Create record_high_low
record_high_low <- present %>%
left_join(past_extremes) %>%
mutate(record = ifelse(temp < past_low,
"#0000CD",
ifelse(temp > past_high,
"#CD2626",
"#00000000")))
# Structure of record_high_low
str(record_high_low)
# Add point layer of record_high_low
ggplot(past_summ, aes(x = yearday, y = temp)) +
geom_point(col = "#EED8AE", alpha = 0.3, shape = 16) +
geom_linerange(aes(ymin = CI_lower, ymax = CI_upper), col = "#8B7E66") +
geom_line(data = present) +
geom_point(data = record_high_low, aes(col = record)) +
scale_color_identity()
#### STEP 7: CUSTOM LEGEND
# Finish the function draw_pop_legend
draw_pop_legend <- function(x = 0.6, y = 0.2, width = 0.2, height = 0.2, fontsize = 10) {
# Finish viewport() function
pushViewport(viewport(x = x, y = y, width = width, height = height, just = "center"))
legend_labels <- c("Past record high",
"95% CI range",
"Current year",
"Past years",
"Past record low")
legend_position <- c(0.9, 0.7, 0.5, 0.2, 0.1)
# Finish grid.text() function
grid.text(legend_labels, x = 0.12, y = legend_position,
just = "left", gp = gpar(fontsize = fontsize, col = "grey20"))
# Position dots, rectangle and line
point_position_y <- c(0.1, 0.2, 0.9)
point_position_x <- rep(0.06, length(point_position_y))
grid.points(x = point_position_x, y = point_position_y, pch = 16,
gp = gpar(col = c("#0000CD", "#EED8AE", "#CD2626")))
grid.rect(x = 0.06, y = 0.5, width = 0.06, height = 0.4,
gp = gpar(col = NA, fill = "#8B7E66"))
grid.lines(x = c(0.03, 0.09), y = c(0.5, 0.5),
gp = gpar(col = "black", lwd = 3))
# Add popViewport() for bookkeeping
popViewport()
}
# Print out plotting object p
p
# Add point layer of record_high_low
p <- ggplot(past_summ, aes(x = yearday, y = temp)) +
geom_point(col = "#EED8AE", alpha = 0.3, shape = 16) +
geom_linerange(aes(ymin = CI_lower, ymax = CI_upper), col = "#8B7E66") +
geom_line(data = present) +
geom_point(data = record_high_low, aes(col = record)) +
scale_color_identity()
p
# Print out plotting object p
p
# Call draw_pop_legend()
draw_pop_legend()
#### STEP 7: CUSTOM LEGEND
library(grid)
# Print out plotting object p
p
# Call draw_pop_legend()
draw_pop_legend()
#### STEP 8: COMBINE INTO DIFFERENT LAYER FUNCTION
# Finish the clean_weather function
clean_weather <- function(file) {
weather <- read.fwf(file,
header = FALSE,
col.names = c("month", "day", "year", "temp"),
widths = c(14, 14, 13, 4))
weather %>%
filter(!(month == 2 & day == 29)) %>%
group_by(year) %>%
mutate(yearday = 1:length(day)) %>%
ungroup() %>%
filter(temp != -99)
}
# Import NYNEWYOR.txt: my_data
my_data <- clean_weather("NYNEWYOR.txt")
# Create the stats object
StatHistorical <- ggproto("StatHistorical", Stat,
compute_group = function(data, scales, params) {
data <- data %>%
filter(year != max(year)) %>%
group_by(x) %>%
mutate(ymin = Hmisc::smean.cl.normal(y)[3],
ymax = Hmisc::smean.cl.normal(y)[2]) %>%
ungroup()
},
required_aes = c("x", "y", "year"))
# Create the layer
stat_historical <- function(mapping = NULL, data = NULL, geom = "point",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
list(
layer(
stat = "identity", data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, col = "#EED8AE", alpha = 0.3, shape = 16, ...)
),
layer(
stat = StatHistorical, data = data, mapping = mapping, geom = "linerange",
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, col = "#8B7E66", ...)
)
)
}
# Build the plot
my_data <- clean_weather("NYNEWYOR.txt")
ggplot(my_data, aes(x = yearday, y = temp, year = year)) +
stat_historical()
# Create the stats object
StatPresent <- ggproto("StatPresent", Stat,
compute_group = function(data, scales, params) {
data <- filter(data, year == max(year))
},
required_aes = c("x", "y", "year"))
# Create the layer
stat_present <- function(mapping = NULL, data = NULL, geom = "line",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
stat = StatPresent, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
# Build the plot
my_data <- clean_weather("NYNEWYOR.txt")
ggplot(my_data, aes(x = yearday, y = temp, year = year)) +
stat_historical() +
stat_present()
# Create the stats object
StatExtremes <- ggproto("StatExtremes", Stat,
compute_group = function(data, scales, params) {
present <- data %>%
filter(year == max(year))
past <- data %>%
filter(year != max(year))
past_extremes <- past %>%
group_by(x) %>%
summarise(past_low = min(y),
past_high = max(y))
# transform data to contain extremes
data <- present %>%
left_join(past_extremes) %>%
mutate(record = ifelse(y < past_low,
"#0000CD",
ifelse(y > past_high,
"#CD2626",
"#00000000")))
},
required_aes = c("x", "y", "year"))
# Create the layer
stat_extremes <- function(mapping = NULL, data = NULL, geom = "point",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
stat = StatExtremes, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
# Build the plot
my_data <- clean_weather("NYNEWYOR.txt")
ggplot(my_data, aes(x = yearday, y = temp, year = year)) +
stat_historical() +
stat_present() +
stat_extremes(aes(col = ..record..)) +
scale_color_identity()
# File paths of all datasets
my_files <- c("NYNEWYOR.txt","FRPARIS.txt", "ILREYKJV.txt", "UKLONDON.txt")
# Build my_data with a for loop
my_data <- NULL
for (file in my_files) {
temp <- clean_weather(file)
temp$id <- sub(".txt", "", file)
my_data <- rbind(my_data, temp)
}
# Build the final plot, from scratch!
ggplot(my_data, aes(x = yearday, y = temp, year = year)) +
stat_historical() +
stat_present() +
stat_extremes(aes(col = ..record..)) +
scale_color_identity() +  # specify colour here
facet_wrap(~id, ncol = 2)
# File paths of all datasets
my_files <- c("NYNEWYOR.txt","FRPARIS.txt", "ILREYKJV.txt", "UKLONDON.txt")
# Build my_data with a for loop
my_data <- NULL
for (file in my_files) {
temp <- clean_weather(file)
temp$id <- sub(".txt", "", file)
my_data <- rbind(my_data, temp)
}
# Build the final plot, from scratch!
ggplot(my_data, aes(x = yearday, y = temp, year = year)) +
stat_historical() +
stat_present() +
stat_extremes(aes(col = ..record..)) +
scale_color_identity() +  # specify colour here
facet_wrap(~id, ncol = 2)
install.packages("gtable")
install.packages("caret")
install.packages("codetools")
install.packages("nlme")
install.packages("class")
install.packages("mlbench")
library(mlbench)
library(caret)
data("Sonar")
#### 60/40 SPLIT
# Shuffle row indices: rows
rows <- sample(nrow(Sonar))
# Randomly order data: Sonar
Sonar <- Sonar[rows, ]
# Identify row to split on: split
split <- round(nrow(Sonar) * .6)
# Create train
train <- Sonar[1:split, ]
# Create test
test <- Sonar[(split + 1):nrow(Sonar), ]
#### FIT LOGIT MODEL
# Fit glm model: model
model <- glm(Class ~ ., family = binomial(link = "logit"), train)
# Predict on test: p
p <- predict(model, test, type = "response")
#### CONFUSION MATRIX
# https://en.wikipedia.org/wiki/Confusion_matrix
# Calculate class probabilities: p_class
p_class <- ifelse(p >  0.5, "M", "R")
# Create confusion matrix
confusionMatrix(p_class, test$Class)
install.packages("e1071")
install.packages("ranger")
install.packages("glmnet")
install.packages("RANN")
install.packages("caretEnsemble")
library(caretEnsemble)
?caretStack
install.packages("openintro")
install.packages("NHANES")
install.packages("qdap")
install.packages("rJava")
install.packages("SnowballC")
install.packages("wordcloud")
install.packages("wordcloud")
install.packages("wordcloud2")
install.packages("wordcloud")
Sys.getenv("R_LIBS_USER")

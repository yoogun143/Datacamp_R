aes(x = cut(weeks, breaks = 5), y = weight)) +
geom_boxplot()
# Mammals scatterplot
ggplot(mammals, aes(BodyWt, BrainWt)) +
geom_point()
# Baseball player scatterplot
ggplot(mlbBat10, aes(OBP, SLG)) +
geom_point()
# Body dimensions scatterplot
ggplot(bdims, aes(hgt, wgt, col = factor(sex))) +
geom_point()
# Smoking scatterplot
ggplot(smoking, aes(age, amtWeekdays)) +
geom_point()
#### SCATTER PLOT
# Scatterplot of weight vs. weeks
ggplot(ncbirths, aes(weeks, weight)) +
geom_point()
# Mammals scatterplot
ggplot(mammals, aes(BodyWt, BrainWt)) +
geom_point()
# Scatterplot with coord_trans()
ggplot(data = mammals, aes(x = BodyWt, y = BrainWt)) +
geom_point() +
coord_trans(x = "log10", y = "log10")
# Scatterplot with scale_x_log10() and scale_y_log10()
ggplot(data = mammals, aes(x = BodyWt, y = BrainWt)) +
geom_point() +
scale_x_log10() + scale_y_log10()
#### OUTLIER
# Scatterplot of SLG vs. OBP
mlbBat10 %>%
filter(AB >= 200) %>%
ggplot(aes(x = OBP, y = SLG)) +
geom_point()
# Identify the outlying player
mlbBat10 %>%
filter(AB >= 200, OBP < 0.2)
library(dpylr)
library(dplyr)
#### OUTLIER
# Scatterplot of SLG vs. OBP
mlbBat10 %>%
filter(AB >= 200) %>%
ggplot(aes(x = OBP, y = SLG)) +
geom_point()
# Identify the outlying player
mlbBat10 %>%
filter(AB >= 200, OBP < 0.2)
#### OUTLIER
# Original scatter plot
ggplot(mlbBat10, aes(x = OBP, y = SLG)) +
geom_point()
# Scatterplot of SLG vs. OBP
mlbBat10 %>%
filter(AB >= 200) %>%
ggplot(aes(x = OBP, y = SLG)) +
geom_point()
#### CORRELATION
# Compute correlation
ncbirths %>%
summarize(N = n(), r = cor(mage, weight))
# Compute correlation for all non-missing pairs
ncbirths %>%
summarize(N = n(), r = cor(weeks, weight, use = "pairwise.complete.obs"))
#### ANSCOMBE DATASET
# Compute properties of Anscombe
Anscombe %>%
group_by(set) %>%
summarize(N = n(), mean(x), sd(x), mean(y), sd(y), cor(x,y))
# Scatterplot with regression line
ggplot(data = bdims, aes(x = hgt, y = wgt)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
setwd('E:\Datacamp\R\GGplot\Part 2 - Statistics, coordinates, facets, themes')
setwd("E:/Datacamp/R/GGplot/Part 2 - Statistics, coordinates, facets, themes")
setwd("E:/Datacamp/R/GGplot/Part 2 - Statistics, coordinates, facets, themes")
dget('adult.txt')
adult <- dget('adult.txt')
View(adult)
#### EXPLORE DATA
# Explore the dataset with summary and str
summary(adult)
str(adult)
# Age histogram
ggplot(adult, aes(x = SRAGE_P)) +
geom_histogram()
library(ggplot2)
# Age histogram
ggplot(adult, aes(x = SRAGE_P)) +
geom_histogram()
# BMI histogram
ggplot(adult, aes(x = BMI_P)) +
geom_histogram()
# Age colored by BMI, default binwidth
ggplot(adult, aes(x = SRAGE_P, fill = factor(RBMI))) +
geom_histogram(binwidth = 1)
# Default binwidth
diff(range(adult$SRAGE_P))/30
#### DATA CLEANING
# Remove individual aboves 84
adult <- adult[adult$SRAGE_P <= 84, ]
# Remove individuals with a BMI below 16 and above or equal to 52
adult <- adult[adult$BMI_P >= 16 & adult$BMI_P < 52, ]
# Relabel the race variable:
adult$RACEHPR2 <- factor(adult$RACEHPR2, labels = c("Latino", "Asian", "African American", "White"))
# Relabel the BMI categories variable:
adult$RBMI <- factor(adult$RBMI, labels = c("Under-weight", "Normal-weight", "Over-weight", "Obese"))
#### MULTIPLE HISTOGRAMS
# The color scale used in the plot
BMI_fill <- scale_fill_brewer("BMI Category", palette = "Reds")
# Theme to fix category display in faceted plot
fix_strips <- theme(strip.text.y = element_text(angle = 0, hjust = 0, vjust = 0.1, size = 14),
strip.background = element_blank(),
legend.position = "none")
# Histogram, add BMI_fill and customizations
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1) +
fix_strips+ BMI_fill +
facet_grid(RBMI ~ .) + theme_classic()
#### DENSITY HISTOGRAM BY POSITION
# Plot 1 - Count histogram
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1) +
BMI_fill
# Plot 2 - Density histogram
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..density..), binwidth = 1) +
BMI_fill
# Plot 3 - Faceted count histogram
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1) +
BMI_fill +
facet_grid(RBMI ~ .)
# Plot 4 - Faceted density histogram
ggplot(adult, aes(x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..density..), binwidth = 1) +
BMI_fill +
facet_grid(RBMI ~ .)
# Plot 5 - Density histogram with position = "fill"
ggplot(adult, aes(x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..density..), binwidth = 1, position = "fill") +
BMI_fill
# Plot 6 - The accurate histogram
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill
####
# An attempt to facet the accurate frequency histogram from before (failed)
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill +
facet_grid(RBMI ~ .)
####
# An attempt to facet the accurate frequency histogram from before (failed)
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill +
facet_grid(RBMI ~ .)
# Create DF with table()
DF <- table(adult$RBMI, adult$SRAGE_P)
# Use apply on DF to get frequency of each group: DF_freq
DF_freq <- apply(DF, 2, function(x) x/sum(x))
# Load reshape2 and use melt() on DF_freq to create DF_melted
library(reshape2)
DF_melted <- melt(DF_freq)
# Change names of DF_melted
names(DF_melted) <- c("FILL", "X", "value")
# Add code to make this a faceted plot
ggplot(DF_melted, aes(x = X, y = value, fill = FILL)) +
geom_col(position = "stack") +
BMI_fill +
facet_grid(FILL ~ .)
####
# An attempt to facet the accurate frequency histogram from before (failed)
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill +
facet_grid(RBMI ~ .)
View(DF_melted)
View(DF_melted)
####
# An attempt to facet the accurate frequency histogram from before (failed)
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill +
facet_grid(RBMI ~ .)
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill
# Plot 5 - Density histogram with position = "fill"
# This is not an accurate representation, as density calculates the proportion across category, and not across bin.
ggplot(adult, aes(x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..density..), binwidth = 1, position = "fill") +
BMI_fill
# Plot 5 - Density histogram with position = "fill"
# This is not an accurate representation, as density calculates the proportion across category, and not across bin.
a <- ggplot(adult, aes(x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..density..), binwidth = 1, position = "fill") +
BMI_fill
a
# Plot 6 - The accurate histogram
b<- ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill
b
ggplot_build(a)
a_obs <- ggplot_build(a)
a_obs$data
a
View(a_obs)
head(a_obs$data)
b_obs <- ggplot_build(b)
b_obs$data
a$data
a$layers
a$scales
a$mapping
a$theme
a$coordinates
a_obs$data
b_obs$data
a_obs$layout
a_obs$plot
a_obs <- ggplot_build(a)$data
a_obs
b_obs <- ggplot_build(b)$data
b_obs
a_obs
a_obs <- data.frame(a_obs)
View(a_obs)
a_obs <- data.frame(ggplot_build(a)$data)
a_obs
b_obs <- data.frame(ggplot_build(b)$data)
b_obs
View(b_obs)
library(dplyr)
a_obs% %>% filter(group = 1)
a_obs %>% filter(group = 1)
View(DF_freq)
a_obs %>% filter(group == 1)
a_obs %>% filter(group == 1) %>%
select(count, x, density, ncount)
a_obs %>% filter(group == 1) %>%
select(count, x, density, ncount) %>%
arrange(x)
a_obs %>% filter(group == 1) %>%
select(count, x, density, ncount)
a_obs %>% filter(group == 1) %>%
select(count, x, density, ncount) %>%
summarise(sum(density))
b_obs %>% filter(group == 1) %>%
select(count, x, density, ncount) %>%
summarise(sum(density))
library(dplyr)
a_obs %>% filter(group == 1) %>%
select(count, x, density, ncount)
b_obs %>% filter(group == 1) %>%
select(count, x, density, ncount)
a
b
a_obs
?ggplot_build
?a_obs
View(a_obs)
View(b_obs)
a_obs %>% filter(x = 18)
a_obs %>% filter(x == 18)
a_obs %>% filter(x == 18) %>%
select(count, y, density)
a_obs %>% filter(x == 18) %>%
select(count, y, density) %>%
mutate(calculate_y = count/sum(count))
b_obs %>% filter(x == 18) %>%
select(count, y, density) %>%
mutate(calculate_y = count/sum(count))
b_obs %>% filter(x == 18) %>%
select(count, y) %>%
mutate(calculate_y = count/sum(count))
a_obs %>% filter(x == 18) %>%
select(count, y, density) %>%
mutate(calculate_y = count/sum(count))
a_obs %>% filter(x == 18) %>%
select(count, y) %>%
mutate(calculate_y = count/sum(count))
a_obs %>% filter(x == 18) %>%
select(density, y)
a_obs %>% filter(x == 18) %>%
select(density, y) %>%
mutate(calculate_y = density/sum(density))
b_obs %>% filter(x == 18) %>%
select(count, y) %>%
mutate(calculate_y = count/sum(count))
b_obs %>% filter(x == 18) %>%
select(count, y) %>%
mutate(calculate_y = count/sum(count))
b_obs %>% filter(x == 18) %>%
select(count, y) %>%
mutate(calculate_perc = count/sum(count))
b_obs %>% filter(x == 18) %>%
select(count, y) %>%
mutate(calculate_perc = count/sum(count)) %>%
mutate(calculate_y = cumsum(calculate_perc))
a_obs %>% filter(x == 18) %>%
select(density, y) %>%
mutate(calculate_perce = density/sum(density))
a_obs %>% filter(x == 18) %>%
select(density, y) %>%
mutate(calculate_perc = density/sum(density)) %>%
mutate(calculate_y = cumsum(calculate_perc))
####
# An attempt to facet the accurate frequency histogram from before (failed)
# the calculation occurs on the fly inside ggplot2
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill +
facet_grid(RBMI ~ .)
####
# An attempt to facet the accurate frequency histogram from before (failed)
# the calculation occurs on the fly inside ggplot2
c <- ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill +
facet_grid(RBMI ~ .)
c
c_obs <- data.frame(ggplot_build(c)$data)
View(c_obs)
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill
c
# Create DF with table()
DF <- table(adult$RBMI, adult$SRAGE_P)
DF
View(DF_freq)
View(DF_melted)
View(DF_freq)
# Add code to make this a faceted plot
ggplot(DF_melted, aes(x = X, y = value, fill = FILL)) +
geom_col(position = "stack") +
BMI_fill +
facet_grid(FILL ~ .)
View(DF_melted)
setwd("E:/Datacamp/R/GGplot/Part 2 - Statistics, coordinates, facets, themes")
adult <- dget('adult.txt')
library(ggplot2)
setwd("E:/Datacamp/R/GGplot/Part 2 - Statistics, coordinates, facets, themes")
adult <- dget('adult.txt')
library(ggplot2)
####
# The initial contingency table
DF <- as.data.frame.matrix(table(adult$SRAGE_P, adult$RBMI))
View(DF)
# Create groupSum, xmax and xmin columns
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
View(DF)
# The groupSum column needs to be removed; don't remove this line
DF$groupSum <- NULL
# Copy row names to variable X
DF$X <- row.names(DF)
View(DF)
# Melt the dataset
library(reshape2)
DF_melted <- melt(DF, id.vars = c("X", "xmin", "xmax"), variable.name = "FILL")
View(DF_melted)
View(DF)
# dplyr call to calculate ymin and ymax - don't change
library(dplyr)
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
View(DF_melted)
# Plot rectangles - don't change
library(ggthemes)
ggplot(DF_melted, aes(ymin = ymin,
ymax = ymax,
xmin = xmin,
xmax = xmax,
fill = FILL)) +
geom_rect(colour = "white") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
BMI_fill +
theme_tufte()
# The color scale used in the plot
BMI_fill <- scale_fill_brewer("BMI Category", palette = "Reds")
ggplot(DF_melted, aes(ymin = ymin,
ymax = ymax,
xmin = xmin,
xmax = xmax,
fill = FILL)) +
geom_rect(colour = "white") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
BMI_fill +
theme_tufte()
#### ADD STATISTIC
# Perform chi.sq test (RBMI and SRAGE_P)
results <- chisq.test(table(adult$RBMI, adult$SRAGE_P))
# Melt results$residuals and store as resid
resid <- melt(results$residuals)
# Change names of resid
names(resid) <- c("FILL", "X", "residual")
# merge the two datasets:
DF_all <- merge(DF_melted, resid)
# Update plot command
library(ggthemes)
ggplot(DF_all, aes(ymin = ymin,
ymax = ymax,
xmin = xmin,
xmax = xmax,
fill = residual)) +
geom_rect() +
scale_fill_gradient2() +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_tufte()
View(resid)
View(results)
View(resid)
?chisq.test
p <- ggplot(DF_all, aes(ymin = ymin,
ymax = ymax,
xmin = xmin,
xmax = xmax,
fill = residual)) +
geom_rect() +
scale_fill_gradient2() +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_tufte()
p
#### ADD TEXT
# Plot so far
p
# Position for labels on y axis (don't change)
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$yposn <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# Plot 1: geom_text for BMI (i.e. the fill axis)
p1 <- p %+% DF_all +
geom_text(aes(x = max(xmax),
y = yposn,
label = FILL),
size = 3, hjust = 1,
show.legend  = FALSE)
p1
# Plot 2: Position for labels on x axis
DF_all$xposn <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
# geom_text for ages (i.e. the x axis)
p1 %+% DF_all +
geom_text(aes(x = xposn, label = X),
y = 1, angle = 90,
size = 3, hjust = 1,
show.legend = FALSE)
#### MAKE ABOVE STEP TO FUNCTION
# Load all packages
library(ggplot2)
library(reshape2)
library(dplyr)
library(ggthemes)
# Script generalized into a function
mosaicGG <- function(data, X, FILL) {
# Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
library(dplyr)
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
# Merge data
DF_all <- merge(DF_melted, resid)
# Positions for labels
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# plot:
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xtext, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = ytext, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
# BMI described by age
mosaicGG(adult, "SRAGE_P", "RBMI")
# Poverty described by age
mosaicGG(adult, "SRAGE_P", "POVLL")
# mtcars: am described by cyl
mosaicGG(mtcars, "cyl", "am")
# Vocab: vocabulary described by education
library(car)
mosaicGG(Vocab, "education", "vocabulary")

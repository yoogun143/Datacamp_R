# Preview students with str()
str(students)
# Coerce Grades to character
students$Grades <- as.character(students$Grades)
# Coerce Medu to factor
students$Medu <- as.factor(students$Medu)
# Coerce Fedu to factor
students$Fedu <- as.factor(students$Fedu)
# Look at students once more with str()
str(students)
#### WORKING WITH DATES
# Preview students2 with str()
str(students)
# Load the lubridate package
library(lubridate)
# Parse as date
dmy("17 Sep 2015")
# Parse as date and time (with no seconds!)
mdy_hm("July 15, 2012 12:56")
# Coerce dob to a date (with no time)
students$dob <- mdy(students$dob)
# Coerce nurse_visit to a date and time
students$nurse_visit <- mdy_hms(students$nurse_visit)
# Look at students2 once more with str()
str(students)
#### STRING MANIPULATION
# Load the stringr package
library(stringr)
# Trim all leading and trailing whitespace
str_trim(c("   Filip ", "Nick  ", " Jonathan"))
# Pad these strings with leading zeros
str_pad(c("23485W", "8823453Q", "994Z"), width = 9, side = "left", pad = "0")
# Make states all uppercase and save result to states_upper
states_upper <- toupper('states')
# Make states_upper all lowercase again
tolower(states_upper)
# Look at the head of students2
head(students)
# Detect all dates of birth (dob) in 1997
str_detect(students$dob, "1997")
# In the sex column, replace "F" with "Female"...
students$sex <- str_replace(students$sex, "F", "Female")
# ...And "M" with "Male"
students$sex <- str_replace(students$sex, "M", "Male")
# View the head of students
head(students)
#### MISSING VALUES
# Call is.na() on the full students to spot all NAs
is.na(students)
# Use the any() function to ask whether there are any NAs in the data
any(is.na(students))
# View a summary() of the dataset
summary(students)
# Call table() on the status column
table(students$Mjob)
View(students)
table(c('', 'hi'))
library(readr)
students <- read_csv("E:/Datacamp/R/3. Cleaning Data/students_with_dates.csv")
#### TYPE CONVERSION
# Preview students with str()
str(students)
# Coerce Grades to character
students$Grades <- as.character(students$Grades)
# Coerce Medu to factor
students$Medu <- as.factor(students$Medu)
# Coerce Fedu to factor
students$Fedu <- as.factor(students$Fedu)
# Look at students once more with str()
str(students)
#### WORKING WITH DATES
# Preview students2 with str()
str(students)
# Load the lubridate package
library(lubridate)
# Parse as date
dmy("17 Sep 2015")
# Parse as date and time (with no seconds!)
mdy_hm("July 15, 2012 12:56")
# Coerce dob to a date (with no time)
students$dob <- mdy(students$dob)
# Coerce nurse_visit to a date and time
students$nurse_visit <- mdy_hms(students$nurse_visit)
# Look at students2 once more with str()
str(students)
#### STRING MANIPULATION
# Load the stringr package
library(stringr)
# Trim all leading and trailing whitespace
str_trim(c("   Filip ", "Nick  ", " Jonathan"))
# Pad these strings with leading zeros
str_pad(c("23485W", "8823453Q", "994Z"), width = 9, side = "left", pad = "0")
# Make states all uppercase and save result to states_upper
states_upper <- toupper('states')
# Make states_upper all lowercase again
tolower(states_upper)
# Look at the head of students2
head(students)
# Detect all dates of birth (dob) in 1997
str_detect(students$dob, "1997")
# In the sex column, replace "F" with "Female"...
students$sex <- str_replace(students$sex, "F", "Female")
# ...And "M" with "Male"
students$sex <- str_replace(students$sex, "M", "Male")
# View the head of students
head(students)
#### MISSING VALUES
# Call is.na() on the full students to spot all NAs
is.na(students)
# Use the any() function to ask whether there are any NAs in the data
any(is.na(students))
# View a summary() of the dataset
summary(students)
# Call table() on the status column to try searching for some of the usual suspects like "", "#N/A", etc.
table(students$Mjob)
View(students)
students <- read.csv("E:/Datacamp/R/3. Cleaning Data/students_with_dates.csv")
students <- read.csv("E:/Datacamp/R/3. Cleaning Data/students_with_dates.csv")
#### TYPE CONVERSION
# Preview students with str()
str(students)
# Coerce Grades to character
students$Grades <- as.character(students$Grades)
# Coerce Medu to factor
students$Medu <- as.factor(students$Medu)
# Coerce Fedu to factor
students$Fedu <- as.factor(students$Fedu)
# Look at students once more with str()
str(students)
#### WORKING WITH DATES
# Preview students2 with str()
str(students)
# Load the lubridate package
library(lubridate)
# Parse as date
dmy("17 Sep 2015")
# Parse as date and time (with no seconds!)
mdy_hm("July 15, 2012 12:56")
# Coerce dob to a date (with no time)
students$dob <- mdy(students$dob)
# Coerce nurse_visit to a date and time
students$nurse_visit <- mdy_hms(students$nurse_visit)
# Look at students2 once more with str()
str(students)
#### STRING MANIPULATION
# Load the stringr package
library(stringr)
# Trim all leading and trailing whitespace
str_trim(c("   Filip ", "Nick  ", " Jonathan"))
# Pad these strings with leading zeros
str_pad(c("23485W", "8823453Q", "994Z"), width = 9, side = "left", pad = "0")
# Make states all uppercase and save result to states_upper
states_upper <- toupper('states')
# Make states_upper all lowercase again
tolower(states_upper)
# Look at the head of students2
head(students)
# Detect all dates of birth (dob) in 1997
str_detect(students$dob, "1997")
# In the sex column, replace "F" with "Female"...
students$sex <- str_replace(students$sex, "F", "Female")
# ...And "M" with "Male"
students$sex <- str_replace(students$sex, "M", "Male")
# View the head of students
head(students)
#### MISSING VALUES
# Call is.na() on the full students to spot all NAs
is.na(students)
# Use the any() function to ask whether there are any NAs in the data
any(is.na(students))
# View a summary() of the dataset
summary(students)
# Call table() on the status column to try searching for some of the usual suspects like "", "#N/A", etc.
table(students$Mjob)
View(students)
# Replace all empty strings in status with NA
students$Mjob[students$Mjob == ""] <- NA
# Print social_df to the console
students
# Call table() on the status column to try searching for some of the usual suspects like "", "#N/A", etc.
table(students$Mjob)
# Replace all empty strings in status with NA
students$Mjob[students$Mjob == ""] <- NA
table(c('', 'hi'))
# Replace all empty strings in status with NA
students$Mjob[students$Mjob == ""] <- NA
# Replace all empty strings in status with NA
students$Mjob[students$Mjob == " "] <- NA
# Call table() on the status column to try searching for some of the usual suspects like "", "#N/A", etc.
table(students$Mjob)
# Replace all empty strings in status with NA
students$Mjob[students$Mjob == "  "] <- NA
sum(students$Mjob[students$Mjob] = "")
sum(students$Mjob[students$Mjob] == "")
sum(students$Mjob[students$Mjob] == " ")
sum(students$Mjob[students$Mjob] == "  ")
sum(students$Mjob[students$Mjob] == "   ")
sum(students$Mjob[students$Mjob] == '')
students$Mjob[students$Mjob] == ''
students$Mjob[102]
students$Mjob
# Replace all empty strings in status with NA
students$Mjob[students$Mjob == ''] <- NA
# Use complete.cases() to see which rows have no missing values
complete.cases(students)
# Use na.omit() to remove all rows with any missing values
na.omit(students)
#### OUTLIERS AND OBVIOUS ERRORS
summary(students)
#### OUTLIERS AND OBVIOUS ERRORS
# Look at a summary() of students3
summary(students)
# View a histogram of the age variable
hist(students$age)
str(students$age)
# View a histogram of the absences variable
hist(students3$absences)
students$ag
# View a histogram of the absences variable
hist(students$absences)
# View a histogram of absences, but force zeros to be bucketed to the right of zero
hist(students$absences, right = FALSE)
# View a boxplot of absences
boxplot(students3$absences)
# View a boxplot of absences
boxplot(students$absences)
#### EXPLORE DATA
# Verify that weather is a data.frame
class(weather)
weather <- readRDS('E:/Datacamp/R/3. Cleaning Data/weather.rds')
#### EXPLORE DATA
# Verify that weather is a data.frame
class(weather)
# Check the dimensions
dim(weather)
# View the column names
names(weather)
# View the structure of the data
str(weather)
# Load dplyr package
library(dplyr)
# Look at the structure using dplyr's glimpse()
glimpse(weather)
# View a summary of the data
summary(weather)
# View first 15 rows
head(weather, n =15)
# View first 6 rows
head(weather, n = 6)
# View the last 6 rows
tail(weather, n = 6)
#### TIDY DATA
# Load the tidyr package
library(tidyr)
# Gather the columns
weather2 <- gather(weather, day, value, X1:X31, na.rm = TRUE)
# View the head
head(weather2)
# First remove column of row names
weather2 <- weather2[, -1]
# Spread the data
weather3 <- spread(weather2, measure, value)
# View the head
head(weather3)
#### PREPARE DATA FOR ANALYSIS
# Load the stringr and lubridate packages
library(stringr)
library(lubridate)
# Remove X's from day column
weather3$day <- str_replace(weather3$day,"X", "")
# Unite the year, month, and day columns
weather4 <- unite(weather3, date, year, month, day, sep = "-")
View(weather4)
View(weather3)
# Rearrange columns using dplyr's select()
weather5 <- select(weather4, date, Events, CloudCover:WindDirDegrees)
# View the head of weather5
head(weather5)
# View the structure of weather5
str(weather5)
# Examine the first 20 rows of weather5. Are most of the characters numeric?
head(weather5, n = 20)
# See what happens if we try to convert PrecipitationIn to numeric
as.numeric(weather5$PrecipitationIn)
# See what happens if we try to convert PrecipitationIn to numeric
as.numeric(weather5$PrecipitationIn)
# Replace T with 0 (T = trace)
weather5$PrecipitationIn <- str_replace(weather5$PrecipitationIn, "T", 0)
weather <- readRDS('E:/Datacamp/R/3. Cleaning Data/weather.rds')
#### EXPLORE DATA
# Verify that weather is a data.frame
class(weather)
# Check the dimensions
dim(weather)
# View the column names
names(weather)
# View the structure of the data
str(weather)
# Load dplyr package
library(dplyr)
# Look at the structure using dplyr's glimpse()
glimpse(weather)
# View a summary of the data
summary(weather)
# View first 6 rows
head(weather, n = 6)
# View the last 6 rows
tail(weather, n = 6)
#### TIDY DATA
# Load the tidyr package
library(tidyr)
# Gather the columns
weather2 <- gather(weather, day, value, X1:X31, na.rm = TRUE)
# View the head
head(weather2)
# First remove column of row names
weather2 <- weather2[, -1]
# Spread the data
weather3 <- spread(weather2, measure, value)
# View the head
head(weather3)
#### PREPARE DATA FOR ANALYSIS
# Load the stringr and lubridate packages
library(stringr)
library(lubridate)
# Remove X's from day column
weather3$day <- str_replace(weather3$day,"X", "")
# Unite the year, month, and day columns
weather4 <- unite(weather3, date, year, month, day, sep = "-")
# Convert date column to proper date format using lubridates's ymd()
weather4$date <- ymd(weather4$date)
# Rearrange columns using dplyr's select()
weather5 <- select(weather4, date, Events, CloudCover:WindDirDegrees)
# View the head of weather5
head(weather5)
# View the structure of weather5
str(weather5)
# Examine the first 20 rows of weather5. Are most of the characters numeric?
head(weather5, n = 20)
# "T" was used to denote a trace amount (i.e. too small to be accurately measured) of precipitation in the PrecipitationIn
# Replace T with 0 (T = trace)
weather5$PrecipitationIn <- str_replace(weather5$PrecipitationIn, "T", 0)
# View the head of weather5
head(weather5)
# "T" was used to denote a trace amount (i.e. too small to be accurately measured) of precipitation in the PrecipitationIn
# Replace T with 0 (T = trace)
weather5$PrecipitationIn <- str_replace(weather5$PrecipitationIn, "T", 0)
weather5$PrecipitationIn
class(weather5$PrecipitationIn)
# "T" was used to denote a trace amount (i.e. too small to be accurately measured) of precipitation in the PrecipitationIn
# Replace T with 0 (T = trace)
weather5$PrecipitationIn <- str_replace(weather5$PrecipitationIn, "T", 0)
# Replace "T" with "0" (T = trace)
weather5$PrecipitationIn <- str_replace(weather5$PrecipitationIn, "T", "0")
# Convert characters to numerics
weather6 <- mutate_at(weather5, vars(CloudCover:WindDirDegrees), funs(as.numeric))
weather <- readRDS('E:/Datacamp/R/3. Cleaning Data/weather.rds')
#### EXPLORE DATA
# Verify that weather is a data.frame
class(weather)
# Check the dimensions
dim(weather)
# View the column names
names(weather)
# View the structure of the data
str(weather)
# Load dplyr package
library(dplyr)
# Look at the structure using dplyr's glimpse()
glimpse(weather)
# View a summary of the data
summary(weather)
# View first 6 rows
head(weather, n = 6)
# View the last 6 rows
tail(weather, n = 6)
#### TIDY DATA
# Load the tidyr package
library(tidyr)
# Gather the columns
weather2 <- gather(weather, day, value, X1:X31, na.rm = TRUE)
# View the head
head(weather2)
# First remove column of row names
weather2 <- weather2[, -1]
# Spread the data
weather3 <- spread(weather2, measure, value)
# View the head
head(weather3)
#### PREPARE DATA FOR ANALYSIS
# Load the stringr and lubridate packages
library(stringr)
library(lubridate)
# Remove X's from day column
weather3$day <- str_replace(weather3$day,"X", "")
# Unite the year, month, and day columns
weather4 <- unite(weather3, date, year, month, day, sep = "-")
# Convert date column to proper date format using lubridates's ymd()
weather4$date <- ymd(weather4$date)
# Rearrange columns using dplyr's select()
weather5 <- select(weather4, date, Events, CloudCover:WindDirDegrees)
# View the head of weather5
head(weather5)
# View the structure of weather5
str(weather5)
# Examine the first 20 rows of weather5. Are most of the characters numeric?
head(weather5, n = 20)
# "T" was used to denote a trace amount (i.e. too small to be accurately measured) of precipitation in the PrecipitationIn
## The dplyr and stringr packages are already loaded
# Replace "T" with "0" (T = trace)
weather5$PrecipitationIn <- str_replace(weather5$PrecipitationIn, "T", "0")
# Convert characters to numerics
weather6 <- mutate_each(weather5, funs(as.numeric), CloudCover:WindDirDegrees)
# Look at result
str(weather6)
weather <- readRDS('E:/Datacamp/R/3. Cleaning Data/weather.rds')
#### EXPLORE DATA
# Verify that weather is a data.frame
class(weather)
# Check the dimensions
dim(weather)
# View the column names
names(weather)
# View the structure of the data
str(weather)
# Load dplyr package
library(dplyr)
# Look at the structure using dplyr's glimpse()
glimpse(weather)
# View a summary of the data
summary(weather)
# View first 6 rows
head(weather, n = 6)
# View the last 6 rows
tail(weather, n = 6)
#### TIDY DATA
# Load the tidyr package
library(tidyr)
# Gather the columns
weather2 <- gather(weather, day, value, X1:X31, na.rm = TRUE)
# View the head
head(weather2)
# First remove column of row names
weather2 <- weather2[, -1]
# Spread the data
weather3 <- spread(weather2, measure, value)
# View the head
head(weather3)
#### PREPARE DATA FOR ANALYSIS
# Load the stringr and lubridate packages
library(stringr)
library(lubridate)
# Remove X's from day column
weather3$day <- str_replace(weather3$day,"X", "")
# Unite the year, month, and day columns
weather4 <- unite(weather3, date, year, month, day, sep = "-")
# Convert date column to proper date format using lubridates's ymd()
weather4$date <- ymd(weather4$date)
# Rearrange columns using dplyr's select()
weather5 <- select(weather4, date, Events, CloudCover:WindDirDegrees)
# View the head of weather5
head(weather5)
# View the structure of weather5
str(weather5)
# Examine the first 20 rows of weather5. Are most of the characters numeric?
head(weather5, n = 20)
# "T" was used to denote a trace amount (i.e. too small to be accurately measured) of precipitation in the PrecipitationIn
## The dplyr and stringr packages are already loaded
# Replace "T" with "0" (T = trace)
weather5$PrecipitationIn <- str_replace(weather5$PrecipitationIn, "T", "0")
# Convert characters to numerics
weather6 <- mutate_at(weather5, vars(CloudCover:WindDirDegrees), funs(as.numeric))
# Look at result
str(weather6)
# Count missing values
sum(is.na(weather6))
# Find missing values
summary(weather6)
# Find indices of NAs in Max.Gust.SpeedMPH
ind <- which(is.na(weather6$Max.Gust.SpeedMPH))
# Look at the full rows for records missing Max.Gust.SpeedMPH
weather6[ind, ]
# Review distributions for all variables
summary(weather6)
# Find row with Max.Humidity of 1000
ind <- which(weather6$Max.Humidity == 1000)
# Look at the data for that day
weather6[ind, ]
# Change 1000 to 100
weather6$Max.Humidity[ind] <- 100
# Look at summary of Mean.VisibilityMiles
summary(weather6$Mean.VisibilityMiles)
# Get index of row with -1 value
ind <- which(weather6$Mean.VisibilityMiles == -1)
# Look at full row
weather6[ind,]
# Set Mean.VisibilityMiles to the appropriate value
weather6$Mean.VisibilityMiles[ind] <- 10
# Review summary of full data once more
summary(weather6)
# Look at histogram for MeanDew.PointF
hist(weather6$MeanDew.PointF)
# Look at histogram for Min.TemperatureF
hist(weather6$Min.TemperatureF)
# Compare to histogram for Mean.TemperatureF
hist(weather6$Mean.TemperatureF)
# Replace empty cells in events column
weather6$events[weather6$Events == ""] <- "None"
# Print the first 6 rows of weather6
head(weather6, n =6)
getwd()
getwd()

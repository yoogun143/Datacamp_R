# Load packages
library(dplyr)
library(tidyr)
# Count number of male and female applicants admitted
ucb_counts <- ucb_admit %>%
count(Admit, Gender)
# View result
ucb_counts
# Spread the output across columns
ucb_counts %>%
spread(Admit, n)
#### PROPORTION OF MALES ADMITTED OVERALL
ucb_admit %>%
# Table of counts of admission status and gender
count(Admit, Gender) %>%
# Spread output across columns based on admission status
spread(Admit, n) %>%
# Create new variable
mutate(Perc_Admit = Admitted / (Admitted + Rejected))
ucb_admit %>%
# Table of counts of admission status and gender
count(Admit, Gender)
#### PROPORTION OF MALES ADMITTED OVERALL
ucb_admit %>%
# Table of counts of admission status and gender
count(Admit, Gender) %>%
# Spread output across columns based on admission status
spread(Admit, n) %>%
# Create new variable
mutate(Perc_Admit = Admitted / (Admitted + Rejected))
#### PROPORTION OF MALES ADMITTED FOR EACH DEPARTMENT
ucb_admission_counts <- ucb_admit %>%
# Counts by department, then gender, then admission status
count(Dept, Gender, Admit)
# See the result
ucb_admission_counts
ucb_admission_counts  %>%
# Group by department, then gender
group_by(Dept, Gender) %>%
# Create new variable
mutate(prop = n / sum(n)) %>%
# Filter for male and admitted
filter(Gender == "Male", Admit == "Admitted")
load("E:/Datacamp/R/Other/Introduction to data/us_regions.RData")
# Simple random sample: states_srs
states_srs <- us_regions %>%
sample_n(8)
# Count states by region
states_srs %>%
group_by(region) %>%
count()
# Stratified sample
states_str <- us_regions %>%
group_by(region) %>%
sample_n(2)
# Count states by region
states_str %>%
group_by(region) %>%
count()
load("E:/Datacamp/R/Other/Introduction to data/evals.RData")
# Inspect evals
str(evals)
# Inspect variable types
glimpse(evals)
str(evals) # Another option
# Remove non-factor variables from the vector below
cat_vars <- c("rank", "ethnicity", "gender", "language",
"cls_level", "cls_profs", "cls_credits",
"pic_outfit", "pic_color")
# Recode cls_students as cls_type: evals
evals <- evals %>%
# Create new variable
mutate(cls_type = ifelse(cls_students <= 18, "small",
ifelse(cls_students <= 59, "midsize", "large")))
View(evals)
# Scatterplot of score vs. bty_avg
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_point()
# Scatterplot of score vs. bty_avg
library(ggplot2)
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_point()
# Scatterplot of score vs. bty_avg colored by cls_type
ggplot(evals, aes(x = bty_avg, y = score, color = cls_type)) +
geom_point()
